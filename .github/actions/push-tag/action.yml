#
#  Copyright (c) 2025 Cofinity-X
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#

---
name: "Publish Github release and tag"
description: "Publish Github release and tag"
inputs:
  version:
    required: true
    description: "The version to be used in the tag and release publication"
  token:
    required: true
    description: "Github token"
  is_latest:
    required: true
    description: "Boolean that defines if a release is latest or not"

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - name: Prepare Git Config
      shell: bash
      run: |
        # Prepare git env
        git config user.name "eclipse-edc-bot"
        git config user.email "edc-bot@eclipse.org"
    - name: Create Release Tag
      id: create_release_tag
      shell: bash
      run: |
        # informative
        git branch -a
        git tag

        # Create & push tag
        git tag ${{ inputs.version }}
        git push origin ${{ inputs.version }}
    - name: Create GitHub Release
      uses: ncipollo/release-action@v1
      with:
        generateReleaseNotes: true
        tag: ${{ inputs.version }}
        token: ${{ inputs.token }}
        makeLatest: ${{ inputs.is_latest }}
        removeArtifacts: false
    - uses: ./.github/actions/gradle-setup
    - name: Set new snapshot version
      if: ${{ inputs.is_latest }}
      shell: bash
      run: |
        # Extract release version
        IFS=.- read -r RELEASE_VERSION_MAJOR RELEASE_VERSION_MINOR RELEASE_VERSION_PATCH SNAPSHOT<<<"${{ inputs.version}}"
        INC=0
        # Compute new snapshot version, do not increment snapshot on non-final releases, e.g. -rc1
        if [ -z $SNAPSHOT ]; then
          # snapshot
          echo "${{ inputs.version }} is a final release version, increase patch for next snapshot"
          INC=1
        else
          echo "${{ inputs.version }} is not a final release version (contains \"$SNAPSHOT\"), will not increase patch"
        fi

        VERSION="$RELEASE_VERSION_MAJOR.$((RELEASE_VERSION_MINOR+$INC)).0-SNAPSHOT"
        SNAPSHOT_VERSION=$VERSION

        # Persist the "version" in the gradle.properties
        sed -i "s/version=.*/version=$SNAPSHOT_VERSION/g" gradle.properties
        
        # Persist the "version" in the version catalog
        sed -i 's/edc\s*=\s*".*"/edc = "$SNAPSHOT_VERSION"/g' gradle/libs.versions.toml

        # Commit and push to origin main
        git add gradle.properties
        git commit --message "Introduce new snapshot version $SNAPSHOT_VERSION"

        git push
